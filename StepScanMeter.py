import sys
from PyQt5 import QtWidgets as qw, QtCore as qc, uic
import pyqtgraph as pg


from lib import scan
from lib import widgets
import pyqtgraph as qg

try:
    from lib.StepScan_GUI import Ui_MainWindow
except:
    print('error importing QtDesigner widgets.')



def main():

    run_qtd = False
    if run_qtd:
        try:
            from lib.StepScan_GUI import Ui_MainWindow
        except:
            print('error importing QtDesigner widgets.')
    # recompile()

    app = qc.QCoreApplication.instance()
    if app is None:
        app = qw.QApplication(sys.argv)
    # Create handle prg for the Graphic Interface
    if run_qtd:
        prg = StepScanMeterMainApp()
    else:
        prg = widgets.StepScanMainWindow()
    
    print('showing program')
    prg.show()

    try:
        app.exec_()
    except:
        print('app.exec_() failed: exiting')



class StepScanMeterMainApp(qw.QMainWindow, Ui_MainWindow):

    def __init__(self):
        super(StepScanMeterMainApp, self).__init__()

        self.setupUi(self)
        # self.scan = scan.Scan()

        # self.tree_parameters = pg.DataTreeWidget(data=scan.metadata)
        # self.parameters_tree = qg.parametertree.Parameter.create(
        #     name='params',
        #     type='group',
        #     children=self.scan.parameters)
        self.tree_parameters.setParameters(self.scan.parameters, showTop=False)

    #     self.parameters_tree.sigTreeStateChanged.connect(self.param_tree_change)
    #
    # def param_tree_change(self, param, changes):
    #     print("tree changes:")
    #     for param, change, data in changes:
    #         path = p.childPath(param)
    #         if path is not None:
    #             childName = '.'.join(path)
    #         else:
    #             childName = param.name()
    #         print('  parameter: %s' % childName)
    #         print('  change:    %s' % change)
    #         print('  data:      %s' % str(data))
    #         print('  ----------')
    #

def my_exception_hook(exctype, value, traceback):
    # Print the error and traceback
    print(exctype, value, traceback)
    # Call the normal Exception hook after
    sys._excepthook(exctype, value, traceback)
    sys.exit(1)

def recompile():
    print('recompiling')
    ui_file = '.\lib\StepScan_GUI.ui'
    ui_dir = '.\lib'
    uic.compileUiDir(ui_dir, execute=True)
    print('done')

if __name__ == "__main__":
    # used to see errors generated by PyQt5 in pycharm:
    sys._excepthook = sys.excepthook
    # Set the exception hook to our wrapping function
    sys.excepthook = my_exception_hook
    main()
