# -*- coding: utf-8 -*-
"""

@author: Steinn Ymir Agustsson
"""
import sys

import pyqtgraph as pg
import qdarkstyle
from PyQt5 import QtWidgets, QtCore

from gui.QT.ui_scanMonitor import  Ui_UI_ScanMonitor
from gui.QT.ui_instrumentsMonitor import Ui_Ui_InstrumentsMonitor
from gui.QT.ui_plotArea import Ui_Ui_PlotArea
from gui.QT.ui_setupTimescale import Ui_Ui_SetupTimeScale


class DockSetupTimeScale(QtWidgets.QDockWidget, QtWidgets.QWidget):

    def __init__(self):
        super(DockSetupTimeScale, self).__init__()

        self.ui = Ui_Ui_SetupTimeScale()
        self.ui.setupUi(self)


class DockScanMonitor(QtWidgets.QDockWidget, QtWidgets.QWidget):
    def __init__(self):
        super(DockScanMonitor, self).__init__()

        self.ui = Ui_UI_ScanMonitor()
        self.ui.setupUi(self)


class DockPlotArea(QtWidgets.QDockWidget, QtWidgets.QWidget):
    def __init__(self):
        super(DockPlotArea, self).__init__()

        self.ui = Ui_Ui_PlotArea()
        self.ui.setupUi(self)
        self.graph = pg.GraphicsView()
        layout = QtWidgets.QGridLayout()
        layout.addWidget(self.graph,0,0)


class DockInstrumentMonitor(QtWidgets.QDockWidget, QtWidgets.QWidget):
    def __init__(self):
        super(DockInstrumentMonitor, self).__init__()

        self.ui = Ui_Ui_InstrumentsMonitor()
        self.ui.setupUi(self)


class TESTMainWidget(QtWidgets.QMainWindow):

    def __init__(self):
        super(TESTMainWidget, self).__init__()
        self.setWindowTitle('Step StepScan Meter')
        self.setGeometry(300, 100, 1600, 900)

        # set the cool dark theme and other plotting settings
        # self.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())
        # pg.setConfigOption('background', 0.1)
        # pg.setConfigOption('foreground', 0.7)
        # pg.setConfigOptions(antialias=True)


        # self.setupUi(self)
        # self.qsettings = QtCore.QSettings('DemsarLabs','StepScanMeter')
        # geometry = self.qsettings.value('geometry', '')


        self.plotArea = DockPlotArea()
        self.plotArea.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea)
        self.instrumentMonitor = DockInstrumentMonitor()
        self.scanMonitor = DockScanMonitor()
        self.setupTimeScale = DockSetupTimeScale()

        # layout = QtWidgets.QGridLayout()  # create a grid for subWidgets
        # layout.setSpacing(10)
        # self.setLayout(layout)
        #
        #
        # # layout.addWidget(self.plotArea, 0, 0)
        self.addDockWidget(QtCore.Qt.LeftDockWidgetArea, self.plotArea)
        self.addDockWidget(QtCore.Qt.RightDockWidgetArea, self.instrumentMonitor)
        self.addDockWidget(QtCore.Qt.BottomDockWidgetArea, self.scanMonitor)
        self.addDockWidget(QtCore.Qt.RightDockWidgetArea, self.setupTimeScale)


        # self.restoreGeometry(geometry)



    # def closeEvent(self, event):
    #     # geometry = self.saveGeometry()
    #     # self.qsettings.setValue('geometry', geometry)
    #     super(TESTMainWidget, self).closeEvent(event)


def my_exception_hook(exctype, value, traceback):
    # Print the error and traceback
    print(exctype, value, traceback)
    # Call the normal Exception hook after
    sys._excepthook(exctype, value, traceback)
    sys.exit(1)

if __name__ == "__main__":
    # used to see errors generated by PyQt5 in pycharm:
    sys._excepthook = sys.excepthook
    # Set the exception hook to our wrapping function
    sys.excepthook = my_exception_hook

    app = QtCore.QCoreApplication.instance()
    if app is None:
        app = QtWidgets.QApplication(sys.argv)
    # Create handle prg for the Graphic Interface
    prg = TESTMainWidget()
    prg.show()

    try:
        app.exec_()
    except:
        print('app.exec_() failed: exiting')