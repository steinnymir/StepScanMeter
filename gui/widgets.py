# -*- coding: utf-8 -*-
"""

@author: Steinn Ymir Agustsson
"""
# -*- coding: utf-8 -*-
"""

@author: Steinn Ymir Agustsson
"""
import sys

import pyqtgraph as pg
# from pyqtgraph.Qt import QtWidgets, QtCore
from pyqtgraph.dockarea import DockArea
from pyqtgraph.parametertree import Parameter, ParameterTree

import qdarkstyle
from PyQt5 import QtWidgets, QtCore

from gui.QT.ui_scanMonitor import Ui_UI_ScanMonitor
from gui.QT.ui_instrumentsMonitor import Ui_Ui_InstrumentsMonitor
from gui.QT.ui_plotArea import Ui_Ui_PlotArea
from gui.QT.ui_setupTimescale import Ui_Ui_SetupTimeScale


def main():
    # used to see errors generated by PyQt5 in pycharm:
    sys._excepthook = sys.excepthook
    # Set the exception hook to our wrapping function
    sys.excepthook = my_exception_hook

    app = QtCore.QCoreApplication.instance()
    if app is None:
        app = QtWidgets.QApplication(sys.argv)
    # Create handle prg for the Graphic Interface
    prg = MainWindow()
    prg.show()
    try:
        app.exec_()
    except:
        print('app.exec_() failed: exiting')


class MainWindow(QtWidgets.QMainWindow):

    def __init__(self):
        super(MainWindow, self).__init__()
        self.setWindowTitle('Step StepScan Meter')
        self.setGeometry(300, 100, 1600, 900)

        self.status_bar = self.statusBar()
        self.status_bar.showMessage('ready')
        self.makeMenuBar()

        # set the cool dark theme and other plotting settings
        # self.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())
        pg.setConfigOption('background', 0.1)
        pg.setConfigOption('foreground', 0.7)
        pg.setConfigOptions(antialias=True)

        self.makeLayout()

    def makeLayout(self):

        self.dock_area = DockArea()
        self.setCentralWidget(self.dock_area)

        # self.setupUi(self)
        # self.qsettings = QtCore.QSettings('DemsarLabs','StepScanMeter')
        # geometry = self.qsettings.value('geometry', '')

        self.plot_area = PlotAreaWidget()
        self.plot_area_docker = QtWidgets.QDockWidget()
        self.plot_area_docker.setObjectName("docker")
        # self.plot_area_docker.setAllowedAreas(QtCore.Qt.TopDockWidgetArea)
        self.plot_area_docker.setWidget(self.plot_area)

        self.scan_setup_area = ScanSetupWidget()
        self.scan_setup_area_docker = QtWidgets.QDockWidget()
        self.scan_setup_area_docker.setObjectName('Scan Setup Area')
        # self.scan_setup_area_docker.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea)
        self.scan_setup_area_docker.setWidget(self.scan_setup_area)


        self.instrument_monitor = DockInstrumentMonitor()
        # self.scan_monitor = DockScanMonitor()
        self.setup_timescale = DockSetupTimeScale()

        # layout = QtWidgets.QGridLayout()  # create a grid for subWidgets
        # layout.setSpacing(10)
        # self.setLayout(layout)
        #

        # layout.addWidget(self.plotArea, 0, 0)

        self.addDockWidget(QtCore.Qt.LeftDockWidgetArea, self.scan_setup_area_docker)
        self.addDockWidget(QtCore.Qt.TopDockWidgetArea, self.plot_area_docker)
        self.addDockWidget(QtCore.Qt.RightDockWidgetArea, self.instrument_monitor)
        # self.addDockWidget(QtCore.Qt.BottomDockWidgetArea, self.scan_monitor)
        self.addDockWidget(QtCore.Qt.RightDockWidgetArea, self.setup_timescale)

        # self.restoreGeometry(geometry)

    def makeMenuBar(self):
        """ programmatic method for adding menu entries.


            """

        # exitAct = QtWidgets.QAction(QIcon('exit.png'), '&Exit', self)
        def addMenuAct(name, onTriggered, shortcut=None, status_tip=None):
            """ quick template for menu entries.

            Parameters:
                name(str): name appearing in the menu.
                onTriggered (slot): slot to activate when entry is activated.

            optional kwargs:
                shortcut (srt): key binding for this function
                status_tip (str): description of this action
                icon (img file): icon to apply for this entry

            """
            ret = QtWidgets.QAction(name, self)
            if shortcut is not None:
                ret.setShortcut(shortcut)
            if status_tip is not None:
                ret.setStatusTip(status_tip)
            ret.triggered.connect(onTriggered)
            return ret

        menubar = self.menuBar()
        menuFields = {'File': [], 'About': []}
        menuFields['File'].append(addMenuAct('&Exit', QtWidgets.qApp.quit, 'Ctrl+Q', 'Exit application'))
        menuFields['About'].append(addMenuAct('&Info', self.closeEvent))
        for fieldName, actions in menuFields.items():
            field = menubar.addMenu('&{}'.format(fieldName))
            for action in actions:
                field.addAction(action)

        # MANUAL ENTRIES:
        viewMenu = menubar.addMenu('View')

        viewStatAct = QtWidgets.QAction('View statusbar', self, checkable=True)
        viewStatAct.setStatusTip('View statusbar')
        viewStatAct.setChecked(True)
        viewStatAct.triggered.connect(self.toggleMenu)
        viewMenu.addAction(viewStatAct)

    def toggleMenu(self, state):
        if state:
            self.status_bar.show()
        else:
            self.status_bar.hide()
        #
        # fileMenu = menubar.addMenu('&File')
        # fileMenu.addAction(exitAct)

    def closeEvent(self, event):
        # geometry = self.saveGeometry()
        # self.qsettings.setValue('geometry', geometry)
        print('quitted properly')
        super(MainWindow, self).closeEvent(event)


class DockSetupTimeScale(QtWidgets.QDockWidget, QtWidgets.QWidget):

    def __init__(self):
        super(DockSetupTimeScale, self).__init__()

        self.ui = Ui_Ui_SetupTimeScale()
        self.ui.setupUi(self)


class ScanSetupWidget(QtWidgets.QWidget):
    def __init__(self):
        super(ScanSetupWidget, self).__init__()

        self.setupUI()

    def setupUI(self):
        self.master_layout = QtWidgets.QVBoxLayout(self)
        # Combobox where to select what type of scan to use
        self.scan_type_select = QtWidgets.QComboBox()

        self.file_settings = self.makeFilesettingsBox()

        self.main_widget = QtWidgets.QWidget()
        self.master_layout.addWidget(self.file_settings)
        self.master_layout.addWidget(self.main_widget)
        self.setLayout(self.master_layout)


    def makeFilesettingsBox(self):
        """ group box containing file name and location text boxes

        TODO: add signals/slots
        """
        file_group_box = QtWidgets.QGroupBox()
        layout = QtWidgets.QVBoxLayout()
        layout.setSpacing(10)

        self._file_name_label = QtWidgets.QLabel('File Name:')
        self.file_name = QtWidgets.QLineEdit()

        self._file_dir_label = QtWidgets.QLabel('Save in:')
        self.file_dir = QtWidgets.QLineEdit()

        layout.addWidget(self.file_name_label)
        layout.addWidget(self.file_name)
        layout.addWidget(self.file_dir_label)
        layout.addWidget(self.file_dir)
        file_group_box.setLayout(layout)
        return file_group_box

    def makeTimeScaleBox(self):
        """ group box containing file name and location text boxes

        TODO: add signals/slots and finish this 
        """
        timescale_group_box = QtWidgets.QGroupBox()
        layout = QtWidgets.QVBoxLayout()
        layout.setSpacing(10)

        sections_layout = QtWidgets.QHBoxLayout()
        self._section_label = QtWidgets.QLabel('File Name:')

        return timescale_group_box







class PlotAreaWidget(QtWidgets.QWidget):
    """ Widget where plots will be represented.

    TODO: add signals and slots.
    """
    def __init__(self):
        super(PlotAreaWidget, self).__init__()
        self.setupUI()

        self.parameters = None


    def setupUI(self):
        self.setObjectName('Plot Widget Area')
        self.setMinimumSize(640,480)
        self.master_layout = QtWidgets.QGridLayout(self)
        self.plot_area = pg.PlotWidget()
        self.parameter_tree = ParameterTree()

        self.master_layout.addWidget(self.plot_area, 0, 1)
        # self.setSizePolicy(sizePolicy)
        self.master_layout.addWidget(self.parameter_tree, 0, 0)

        self.setLayout(self.master_layout)


class DockInstrumentMonitor(QtWidgets.QDockWidget, QtWidgets.QWidget):
    def __init__(self):
        super(DockInstrumentMonitor, self).__init__()

        self.ui = Ui_Ui_InstrumentsMonitor()
        self.ui.setupUi(self)


def my_exception_hook(exctype, value, traceback):
    # Print the error and traceback
    print(exctype, value, traceback)
    # Call the normal Exception hook after
    sys._excepthook(exctype, value, traceback)
    sys.exit(1)


if __name__ == "__main__":
    main()
